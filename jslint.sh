#!/bin/bash

# Wrapper shell script for the JSLint utility invoked using Rhino
# Author: Andrew Goktepe
# JSLint (jslint.js): http://www.jslint.com/rhino/index.html
#
# Usage:
# Recursive mode: jslint.sh -d <directory> 
# Single file mode: jslint.sh -f <file>

cd $(dirname $0)
mydir=$PWD
# must load extra library rhino.js to run fulljslint.js within Rhino
cat fulljslint.js rhino.js > combined.js
cd - >/dev/null

jslint_filename=combined.js

failed=$(mktemp)
rm -f $failed
passed=$(mktemp)
rm -f $passed
ignored=$(mktemp)
rm -f $ignored
returnfile=$(mktemp)
echo 0 > $returnfile

if ! which java >/dev/null ; then
  echo "ERROR: java executable not available in PATH"
  exit 1
fi

while getopts "d:f:" optionName ; do
  case "$optionName" in
    d)
      mode=recursive
      jsdir=$OPTARG
      ;;
    f)
      mode=singlefile
      jsfile=$OPTARG
      ;;
    *)
      echo "Unrecognized option: $optionName"
      echo "Usage: $(basename $0) [-f <jsfile>] | [-d <jsdir>]"
      exit 1
      ;;
  esac
done

runjslint() {
  echo "********************************"
  echo "Checking $1"
  echo "********************************"
  java -cp $mydir/js.jar org.mozilla.javascript.tools.shell.Main $mydir/${jslint_filename} "$1"
  if [ $? != 0 ] ; then
    echo "FAIL: $1" >> $failed
    echo 1 > $returnfile
  else
    echo "PASS: $1" >> $passed
  fi
}

case $mode in
  singlefile)
    if [ -d "$jsfile" ] ; then
      echo "ERROR: $jsfile is a directory, not a file"
      exit 1
    fi
    if [ ! -f "$jsfile" ] ; then
      echo "ERROR: File not found: $jsfile"
      exit 1
    fi
    runjslint "$jsfile"
    ;;
  recursive)
    if [ -f "$jsdir" ] ; then
      echo "ERROR: $jsfile is a file, not a directory"
      exit 1
    fi
    if [ ! -d "$jsdir" ] ; then
      echo "ERROR: Directory does not exist: $jsfile"
      exit 1
    fi
    if ! cd $jsdir ; then
      echo "ERROR: Could not change directories to $jsdir"
      exit 1
    fi

    # Hudson will run this script from 2 levels above any jslint-ignore files.  For jslint-ignore 
    # files to be visible to Hudson, create a single, combined jslint-ignore file at the top level
    # before running the jslint check
    if [ -f ./jslint-ignore ] ; then
      # assume top-level jslint-ignore file is part of the svn project
      cleanup_ignore_file=false
    else
      # we will create the top-level jslint-ignore file
      cleanup_ignore_file=true
    fi
    find . -mindepth 2 -maxdepth 2 -name jslint-ignore |
      sed 's#^\./##g' | sed 's#/.*##g' | while read d ; do
        sed "s#^#$d/#" < $d/jslint-ignore >> ./jslint-ignore
    done

    # process any jslint-include files
    if [ -f ./jslint-include ] ; then
      # assume top-level jslint-include file is part of the svn project
      cleanup_include_file=false
    else
      # we will create the top-level jslint-include file
      cleanup_include_file=true
    fi
    find . -mindepth 2 -maxdepth 2 -name jslint-include |
      sed 's#^\./##g' | sed 's#/.*##g' | while read d ; do
        sed "s#^#$d/#" < $d/jslint-include >> ./jslint-include
    done

    # run jslint check
    find . -type f -name '*.json' -o -name '*.js' |
      egrep -v '(fulljslint.js|rhino.js|combined.js)' |
      sed 's#^\./##' |
        while read f;do
          if [ -f "./jslint-ignore" ] && grep -x $f "./jslint-ignore" >/dev/null 2>&1; then
            echo "[jslint-ignore] ignoring $f"
            echo "IGNORED: $f" >> $ignored
          else
            runjslint "$f"
          fi
    done 
    if [ -f ./jslint-include ] ; then
      grep -v '#' ./jslint-include | while read jslint_include_file ; do
        runjslint "$jslint_include_file"
      done   
    fi

    if [ $cleanup_ignore_file == "true" ] ; then
      # top-level jslint-ignore was generated by this script.  clean it up.
      rm -f ./jslint-ignore
    fi
    if [ $cleanup_include_file == "true" ] ; then
      # top-level jslint-include was generated by this script.  clean it up.
      rm -f ./jslint-include
    fi

    cd -
    ;;
  *) ;;
esac

echo "=================================="
[ -e $ignored ] && cat $ignored && rm -f $ignored
echo "=================================="
[ -e $passed ] && cat $passed && rm -f $passed
echo "=================================="
[ -e $failed ] && cat $failed && rm -f $failed
echo "=================================="
retval=$(cat $returnfile)
rm -f $returnfile
exit $retval
